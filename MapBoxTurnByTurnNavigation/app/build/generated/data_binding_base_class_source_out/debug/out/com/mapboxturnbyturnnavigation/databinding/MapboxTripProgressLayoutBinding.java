// Generated by view binder compiler. Do not edit!
package com.mapboxturnbyturnnavigation.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.imageview.ShapeableImageView;
import com.mapboxturnbyturnnavigation.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class MapboxTripProgressLayoutBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView distanceRemainingText;

  @NonNull
  public final TextView estimatedTimeToArriveText;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final View imgDottedLine;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final ImageView imgLocation;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final ImageView imgOrigin;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final ShapeableImageView imgProfile;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final RelativeLayout rlHeader;

  @NonNull
  public final TextView timeRemainingText;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final View tripProgressDivider;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView tripProgressDividerLeft;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView tripProgressDividerRight;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final TextView txtDestinationLocation;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final TextView txtName;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final TextView txtOriginLocation;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final TextView txtPickOutPoint;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final TextView txtPickupPoint;

  private MapboxTripProgressLayoutBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView distanceRemainingText, @NonNull TextView estimatedTimeToArriveText,
      @Nullable View imgDottedLine, @Nullable ImageView imgLocation, @Nullable ImageView imgOrigin,
      @Nullable ShapeableImageView imgProfile, @Nullable RelativeLayout rlHeader,
      @NonNull TextView timeRemainingText, @Nullable View tripProgressDivider,
      @Nullable TextView tripProgressDividerLeft, @Nullable TextView tripProgressDividerRight,
      @Nullable TextView txtDestinationLocation, @Nullable TextView txtName,
      @Nullable TextView txtOriginLocation, @Nullable TextView txtPickOutPoint,
      @Nullable TextView txtPickupPoint) {
    this.rootView = rootView;
    this.distanceRemainingText = distanceRemainingText;
    this.estimatedTimeToArriveText = estimatedTimeToArriveText;
    this.imgDottedLine = imgDottedLine;
    this.imgLocation = imgLocation;
    this.imgOrigin = imgOrigin;
    this.imgProfile = imgProfile;
    this.rlHeader = rlHeader;
    this.timeRemainingText = timeRemainingText;
    this.tripProgressDivider = tripProgressDivider;
    this.tripProgressDividerLeft = tripProgressDividerLeft;
    this.tripProgressDividerRight = tripProgressDividerRight;
    this.txtDestinationLocation = txtDestinationLocation;
    this.txtName = txtName;
    this.txtOriginLocation = txtOriginLocation;
    this.txtPickOutPoint = txtPickOutPoint;
    this.txtPickupPoint = txtPickupPoint;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static MapboxTripProgressLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static MapboxTripProgressLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.mapbox_trip_progress_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static MapboxTripProgressLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.distanceRemainingText;
      TextView distanceRemainingText = ViewBindings.findChildViewById(rootView, id);
      if (distanceRemainingText == null) {
        break missingId;
      }

      id = R.id.estimatedTimeToArriveText;
      TextView estimatedTimeToArriveText = ViewBindings.findChildViewById(rootView, id);
      if (estimatedTimeToArriveText == null) {
        break missingId;
      }

      id = R.id.imgDottedLine;
      View imgDottedLine = ViewBindings.findChildViewById(rootView, id);

      id = R.id.imgLocation;
      ImageView imgLocation = ViewBindings.findChildViewById(rootView, id);

      id = R.id.imgOrigin;
      ImageView imgOrigin = ViewBindings.findChildViewById(rootView, id);

      id = R.id.imgProfile;
      ShapeableImageView imgProfile = ViewBindings.findChildViewById(rootView, id);

      id = R.id.rlHeader;
      RelativeLayout rlHeader = ViewBindings.findChildViewById(rootView, id);

      id = R.id.timeRemainingText;
      TextView timeRemainingText = ViewBindings.findChildViewById(rootView, id);
      if (timeRemainingText == null) {
        break missingId;
      }

      id = R.id.tripProgressDivider;
      View tripProgressDivider = ViewBindings.findChildViewById(rootView, id);

      id = R.id.tripProgressDividerLeft;
      TextView tripProgressDividerLeft = ViewBindings.findChildViewById(rootView, id);

      id = R.id.tripProgressDividerRight;
      TextView tripProgressDividerRight = ViewBindings.findChildViewById(rootView, id);

      id = R.id.txtDestinationLocation;
      TextView txtDestinationLocation = ViewBindings.findChildViewById(rootView, id);

      id = R.id.txtName;
      TextView txtName = ViewBindings.findChildViewById(rootView, id);

      id = R.id.txtOriginLocation;
      TextView txtOriginLocation = ViewBindings.findChildViewById(rootView, id);

      id = R.id.txtPickOutPoint;
      TextView txtPickOutPoint = ViewBindings.findChildViewById(rootView, id);

      id = R.id.txtPickupPoint;
      TextView txtPickupPoint = ViewBindings.findChildViewById(rootView, id);

      return new MapboxTripProgressLayoutBinding((ConstraintLayout) rootView, distanceRemainingText,
          estimatedTimeToArriveText, imgDottedLine, imgLocation, imgOrigin, imgProfile, rlHeader,
          timeRemainingText, tripProgressDivider, tripProgressDividerLeft, tripProgressDividerRight,
          txtDestinationLocation, txtName, txtOriginLocation, txtPickOutPoint, txtPickupPoint);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
